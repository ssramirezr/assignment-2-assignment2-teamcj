def cky(grammar, inputStr):
    n = len(inputStr)
    # Create a 2D table to store intermediate results
    # Initialize all cells to empty sets
    table = [[set() for _ in range(n)] for _ in range(n)]

    # Fill in the diagonal of the table with non-terminal symbols corresponding to terminals in the input string
    for i in range(n):
        for nt, productions in grammar.items():
            for production in productions:
                if len(production) == 1 and production[0] == inputStr[i]:
                    table[i][i].add(nt)

    # Fill in the table
    for width in range(2, n + 1):
        for start in range(n - width + 1):
            end = start + width
            for mid in range(start + 1, end):
                # Check each non-terminal symbol and its production rules
                for nt, productions in grammar.items():
                    for production in productions:
                        # For binary productions A -> B C
                        if len(production) == 2:
                            b, c = production
                            # Check if there are B and C in the respective positions in the table
                            for bVal in table[start][mid - 1]:
                                for cVal in table[mid][end - 1]:
                                    if bVal == b and cVal == c:
                                        table[start][end - 1].add(nt)
    # Check if the start symbol 'S' is in the top right corner of the table
    return 'S' in table[0][n - 1]

def main():
    # Input the number of grammars to be analyzed
    grammarsToAnalyze = int(input())

    # Process each grammar
    for _ in range(grammarsToAnalyze):
        # Input the number of non-terminal symbols and the number of strings to analyze
        line = input()
        numNT, numStr = [int(i) for i in line.split()]

        # Initialize a dictionary to store the grammar rules
        grammar = {}

        # Input the grammar rules
        for _ in range(numNT):
            rule = input().split()
            ntSymbol = rule[0]
            productions = rule[1:]
            grammar[ntSymbol] = productions
        
        # Process each string to analyze
        for _ in range(numStr):
            string = input()
            result = cky(grammar, string)

            # Output 'yes' if the string is generated by the grammar, 'no' otherwise
            if result is True: 
                print('yes')
            else:
                print('no')

if __name__ == "__main__":
    main()
